#include "ChessController.h"
#include "ApplicationController.h"
#include <string.h>
ChessController::ChessController(ApplicationController* app)
{
    m_app = app;
    unsigned char chessBoard[CHESS_ROW][CHESS_COL] = {
        {WHITE_ROOK,WHITE_KNIGHT,WHITE_BISHOP,WHITE_KING,WHITE_QUEEN,WHITE_BISHOP,WHITE_KNIGHT,WHITE_ROOK},
        {WHITE_PAWN,WHITE_PAWN,WHITE_PAWN,WHITE_PAWN,WHITE_PAWN,WHITE_PAWN,WHITE_PAWN,WHITE_PAWN},
        {CHESS_SPACE,CHESS_SPACE,CHESS_SPACE,CHESS_SPACE,CHESS_SPACE,CHESS_SPACE,CHESS_SPACE,CHESS_SPACE},
        {CHESS_SPACE,CHESS_SPACE,CHESS_SPACE,CHESS_SPACE,CHESS_SPACE,CHESS_SPACE,CHESS_SPACE,CHESS_SPACE},
        {CHESS_SPACE,CHESS_SPACE,CHESS_SPACE,CHESS_SPACE,CHESS_SPACE,CHESS_SPACE,CHESS_SPACE,CHESS_SPACE},
        {CHESS_SPACE,CHESS_SPACE,CHESS_SPACE,CHESS_SPACE,CHESS_SPACE,CHESS_SPACE,CHESS_SPACE,CHESS_SPACE},
        {BLACK_ROOK,BLACK_KNIGHT,BLACK_BISHOP,BLACK_KING,BLACK_QUEEN,BLACK_BISHOP,BLACK_KNIGHT,BLACK_ROOK},
        {BLACK_PAWN,BLACK_PAWN,BLACK_PAWN,BLACK_PAWN,BLACK_PAWN,BLACK_PAWN,BLACK_PAWN,BLACK_PAWN}
    };
    memcpy(m_chessBoard,chessBoard,CHESS_ROW*CHESS_COL);
}
void ChessController::checkPiece() {
    m_app->msleep(1000);
    m_app->setMachineState(MACHINE_STATE::MACHINE_WAIT_OPPONENT_MOVE);
}
void ChessController::waitOpponentMove() {
    m_app->msleep(1000);
    m_app->setMachineState(MACHINE_STATE::MACHINE_CALCULATE_NEXT_MOVE);
}
void ChessController::calculateNextMove() {
    m_app->msleep(1000);
    m_app->setMachineState(MACHINE_STATE::MACHINE_MOVE_PIECE);
}
